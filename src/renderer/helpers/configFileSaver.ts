import { PackageId } from '../../types/ModFiles';

/** Converts a modlist and version into a string formatted like ModsConfig.xml.
 *
 * @param {PackageId[]} mods - Array of package ID's in lowercase.
 * @param {string} fullVersion - Full version label, e.g. `1.3.3200 rev726`.
 * @param {PackageId[]} knownExpansions - Array of package ID's of DLCs in lowercase.
 * @param {number} [spacing=2] - Number of spaces of indentation to use (default 2).
 */
export default function toModsConfigFile(
    mods: PackageId[],
    fullVersion: string,
    knownExpansions: PackageId[],
    spacing: number = 2,
): string {
    const output: string[] = [
        '<?xml version="1.0" encoding="utf-8"?>',
        `<!-- Generated by RimWorld Mod Manager ${window.api.version} (https://github.com/NachoToast/RimWorld-Mod-Manager) -->`,
        '<ModsConfigData>',
        `${' '.repeat(spacing)}<version>${fullVersion}</version>`,
        `${' '.repeat(spacing)}<activeMods>`,
    ];

    mods.forEach((packageId) => {
        output.push(`${' '.repeat(2 * spacing)}<li>${packageId}</li>`);
    });
    output.push(`${' '.repeat(spacing)}</activeMods>`, `${' '.repeat(spacing)}<knownExpansions>`);

    knownExpansions.forEach((packageId) => {
        output.push(`${' '.repeat(2 * spacing)}<li>${packageId}</li>`);
    });

    output.push(`${' '.repeat(spacing)}</knownExpansions>`, '</ModsConfigData>');

    return output.join('\r\n'); // RimWorld mod manager is windows-only, so carriage return instead of just LF
}
